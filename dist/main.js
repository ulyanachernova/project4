/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/base.css":(e,t,n)=>{n.r(t)},"./src/data-books.js":(e,t,n)=>{n.r(t),n.d(t,{apiKey:()=>o,buttons:()=>r,displayResult:()=>c,letResult:()=>i,output:()=>l,points:()=>s,sendRequest:()=>a});const o="AIzaSyDx-mGbcsl9RXeb3RGdW-ed_GmKYGTWnM4",r=document.querySelectorAll(".nav-link"),s=document.querySelectorAll(".nav-link-point"),l=document.querySelector(".output"),a=(e,t)=>{console.log(e),fetch(e).then((e=>e.json())).then((e=>{t&&t(e)})).catch((e=>{console.log(e.message)}))},c=e=>{let t="";e.items.forEach((e=>{const n=function(){let t="../images/placeholder.png";return e.volumeInfo.imageLinks&&(t=e.volumeInfo.imageLinks.thumbnail),t},o=function(){let t="";return e.volumeInfo.authors&&(t=e.volumeInfo.authors),t},r=e.volumeInfo.title,s=function(){let t="";return e.volumeInfo.averageRating&&(t=e.volumeInfo.averageRating),t},l=function(){let t="";return e.volumeInfo.ratingsCount&&(t=`${e.volumeInfo.ratingsCount} review`),t},a=function(){let t="";return e.volumeInfo.description&&(t=e.volumeInfo.description),t},c=function(){let t="";return e.saleInfo.retailPrice&&(t=`$${(e.saleInfo.retailPrice.amount/98.2).toFixed(2)}`),t},i=`\n            <div class="card">\n                <div class="card-image">\n                    <img src="${n()}">\n                </div>\n                <div class="card-info">          \n                    <p class="card-info-authors">${o()}</p>\n                    <p class="card-info-title">${r}</p>\n                    <div class="rating-block">\n                        <p class='rating-block-result'>${s()}</pclassrating-block-result>\n                        <p class="rating-block-result">&nbsp;${l()}</p>\n                    </div>\n                    <p class="card-block-description">${a()}</p>\n                    <p>${c()}</p>\n                    <button class="button button-buy-now">BUY NOW</button>\n                </div>\n            </div>\n        `;t+=i})),l.innerHTML=t,localStorage.setItem("pictures",t)},i=()=>{let e=document.querySelector(".active-nav-li");document.querySelector(".active-nav-point");a(`https://www.googleapis.com/books/v1/volumes?q="subject:${e.textContent}"&key=${o}&printType=books&startIndex=0&maxResults=6&langRestrict=en`,c)};document.addEventListener("DOMContentLoaded",(()=>{document.querySelector(".active-nav-li");i()})),r.forEach(((e,t)=>{e.addEventListener("click",(()=>{document.querySelector(".active-nav-li").classList.remove("active-nav-li"),e.classList.add("active-nav-li"),s.forEach(((e,t)=>{document.querySelector(".active-nav-point").classList.remove(".active-nav-point"),e.classList.add(".active-nav-point")})),i()}))}))}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var s=t[o]={exports:{}};return e[o](s,s.exports,n),s.exports}n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{n.r(o);n("./src/base.css"),n("./src/data-books.js");const e=document.querySelector(".slider-line"),t=document.querySelectorAll(".point");let r=0,s=0;const l=e=>{for(let e of t)e.classList.remove("active-point");t[e].classList.add("active-point")};t.forEach(((t,n)=>{t.addEventListener("click",(()=>{r=1120*n,e.style.left=-r+"px",s=n,l(s),c()}))}));let a=0;function c(){clearInterval(a),a=setInterval((function(){r<679*(t.length-1)?(r+=1120,s++):(r=0,s=0),e.style.left=-r+"px",l(s)}),5e3)}c()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,